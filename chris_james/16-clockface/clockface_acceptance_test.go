package clockface_test

import (
	"bytes"
	"encoding/xml"
	"testing"
	"time"

	clockface "github.com/DarrelASandbox/playground-go/chris_james/16-clockface"
)

/*
- This test does not cover all necessary information, such as the x1 values.
- Attributes for x1 and similar parameters should be numbers, not strings.
- Consider whether the style of the hand is relevant for this test.
- Determine if the empty Text node generated by zak is important.
*/

/*
- Made the important parts of the struct named types -- the Line and the Circle
- Turned the numeric attributes into float64s instead of strings.
- Deleted unused attributes like Style and Text
- Renamed Svg to SVG because it's the right thing to do.
*/
type SVG struct {
	XMLName xml.Name `xml:"svg"`
	Xmlns   string   `xml:"xmlns,attr"`
	Width   string   `xml:"width,attr"`
	Height  string   `xml:"height,attr"`
	ViewBox string   `xml:"viewBox,attr"`
	Version string   `xml:"version,attr"`
	Circle  Circle   `xml:"circle"`
	Line    []Line   `xml:"line"`
}

type Circle struct {
	Cx float64 `xml:"cx,attr"`
	Cy float64 `xml:"cy,attr"`
	R  float64 `xml:"r,attr"`
}

type Line struct {
	X1 float64 `xml:"x1,attr"`
	Y1 float64 `xml:"y1,attr"`
	X2 float64 `xml:"x2,attr"`
	Y2 float64 `xml:"y2,attr"`
}

/*
- Tests will pass even if the SVG is not valid, as the test only checks for the presence of a string in the output.
- Tests will fail for minor, irrelevant changes to the string, such as an extra space between attributes.
- The primary issue is testing a data structure (XML) by examining its string representation.
- Testing XML as a string leads to fragile tests that are not sufficiently sensitive.
- This approach results in tests that do not accurately test the intended functionality.
*/
func TestSVGWriterAtMidnight(t *testing.T) {
	tm := time.Date(1337, time.January, 1, 0, 0, 0, 0, time.UTC)

	b := bytes.Buffer{}
	clockface.SVGWriter(&b, tm)

	svg := SVG{}
	xml.Unmarshal(b.Bytes(), &svg)

	want := Line{150, 150, 150, 60}

	for _, line := range svg.Line {
		if line == want {
			return
		}
	}

	t.Errorf("Expected to find the second hand line %+v, in the SVG line %+v", want, svg.Line)
}
